{"version":3,"sources":["Components/TimeComparisionComponent.jsx","Components/HeaderComponent.js","Algorithms/MergeSort.js","Algorithms/BubbleSort.js","Algorithms/QuickSort.js","Components/SortingVisualiser/SortingVisualiserComponent.jsx","Algorithms/InsertionSort.js","Algorithms/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["NUMBER_OF_ARRAY_BARS","TimeComparision","props","state","chartData","chartDataSorted","chartDataTime","this","resetArray","isTime","document","getElementById","innerHTML","bsTime","qsTime","msTime","ssTime","setState","datasets","label","data","min","max","array","i","push","Math","floor","random","indexarray","labels","arrayis","len","length","t0is","performance","now","tmp","j","t1is","arrayss","t0ss","t1ss","arraybs","swapped","t0bs","t1bs","className","onClick","resetSizeOfArray100","resetSizeOfArray250","resetSizeOfArray500","resetSizeOfArray1000","resetSizeOfArray5000","clearSortGraph","bubbleSort","id","mergeSort","quickSort","insertionSort","selectionSort","target","href","Button","computeTimeGraph","Component","Header","useState","isOpen","setIsOpen","Navbar","light","expand","NavbarBrand","to","NavbarToggler","Collapse","navbar","Nav","NavItem","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","divider","getMergeSortAnimations","animations","helperArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","k","doMerge","getBubbleSortAnimations","x","swap","firstIndex","secondIndex","temp","getQuickSortAnimations","doQuickSort","pivotIdx","randomIntFromInterval","swapEleInArray","lti","partitionArray","firstIdx","secondIdx","PRIMARY_COLOR","SortingVisualizer","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","position","getInsertionSortAnimations","getSelectionSortAnimations","map","value","idx","key","React","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b516ff2.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport {Bar,Line,Pie} from 'react-chartjs-2';\nimport { Button } from 'reactstrap';\n// Change this value for the number of bar(value) in the array.\nvar NUMBER_OF_ARRAY_BARS = 100;\nexport default class TimeComparision extends Component {\n\n    constructor(props){\n        super(props);\n        this.state={\n            chartData:[],\n           chartDataSorted:[],\n           chartDataTime:[]\n\n        }\n    }\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    computeTimeGraph(){\n     const isTime= document.getElementById('time-taken-is').innerHTML; \n     const bsTime= document.getElementById('time-taken-bs').innerHTML; \n     const qsTime= document.getElementById('time-taken-qs').innerHTML; \n     const msTime= document.getElementById('time-taken-ms').innerHTML; \n     const ssTime= document.getElementById('time-taken-ss').innerHTML; \n      this.setState({chartDataTime:{\n          datasets:[\n              { label:'time(ms)',\n                  data:[bsTime,msTime,qsTime,isTime,ssTime]\n              }\n          ]\n        \n        }})\n\n    }\n    clearSortGraph(){\n        this.setState({chartDataSorted:{\n          datasets:[\n              {\n                  label:'Value not sorted',\n              }\n          ]\n\n      }}\n      \n      );\n    }\n    resetSizeOfArray500(){\n     NUMBER_OF_ARRAY_BARS=500;\n      this.resetArray();\n    }\n    resetSizeOfArray250(){\n      NUMBER_OF_ARRAY_BARS=250;\n       this.resetArray();\n     }\n     resetSizeOfArray5000(){\n      NUMBER_OF_ARRAY_BARS=5000;\n       this.resetArray();\n     }\n     \n     resetSizeOfArray1000(){\n      NUMBER_OF_ARRAY_BARS=1000;\n       this.resetArray();\n     }\n     resetSizeOfArray100(){\n      NUMBER_OF_ARRAY_BARS=100;\n       this.resetArray();\n     }\n    \n    resetArray() {\n        const array = [];\n        for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n          array.push(randomIntFromInterval(80, 250));\n        }\n        const indexarray=[];\n        for (let i=0;i<NUMBER_OF_ARRAY_BARS;i++){\n            indexarray.push(`${i}`);\n        }\n        this.setState({chartData:{\n            labels:indexarray,\n            datasets:[\n                {\n                    label:'Value',\n                    data:array\n                }\n            ]\n\n        }}\n        \n        );\n        this.setState({chartDataSorted:{\n          labels:indexarray,\n          datasets:[\n              {\n                  label:'Value not sorted',\n                  data:array\n              }\n          ]\n\n      }}\n      \n      );\n      this.setState({chartDataTime:{\n        labels:[\"Bubble sort\",\"Merge Sort\",\"Quick Sort\",\"Insertion Sort\",\"Selection Sort\"],\n        datasets:[\n          {\n              label:'time(ms)'\n          }\n      ]\n\n      }});\n      document.getElementById('time-taken-is').innerHTML=`Not Sorted`; \n      document.getElementById('time-taken-bs').innerHTML=`Not Sorted`; \n      document.getElementById('time-taken-qs').innerHTML=`Not Sorted`; \n      document.getElementById('time-taken-ms').innerHTML=`Not Sorted`; \n      document.getElementById('time-taken-ss').innerHTML=`Not Sorted`; \n\n      }\n      insertionSort(){\n        const chartData=this.state.chartData;\n        const arrayis=chartData.datasets[0].data;\n      \n          var len = arrayis.length;\n          const t0is=performance.now();\n          for (var i = 1; i < len; i++) {\n            var tmp = arrayis[i]; //Copy of the current element. \n            /*Check through the sorted part and compare with the number in tmp. If large, shift the number*/\n            for (var j = i - 1; j >= 0 && (arrayis[j] > tmp); j--) {\n              //Shift the number\n              arrayis[j + 1] = arrayis[j];\n            }\n            //Insert the copied number at the correct position\n            //in sorted part. \n            arrayis[j + 1] = tmp;\n          }\n          const t1is=performance.now();\n          this.setState({chartDataSorted:{\n            datasets:[\n                { label:'Insertion Sorted Values',\n                    data:arrayis\n                }\n            ]\n        \n        }})\n        document.getElementById('time-taken-is').innerHTML=`${t1is-t0is}`;    \n\n      }\n\n       selectionSort() {\n        const chartData=this.state.chartData;\n        const arrayss=chartData.datasets[0].data;\n        var length = arrayss.length;\n        const t0ss=performance.now();\n        for (var i = 0; i < length - 1; i++) {\n          //Number of passes\n          var min = i; //min holds the current minimum number position for each pass; i holds the Initial min number\n          for (var j = i + 1; j < length; j++) { //Note that j = i + 1 as we only need to go through unsorted array\n            if (arrayss[j] < arrayss[min]) { //Compare the numbers\n              min = j; //Change the current min number position if a smaller num is found\n            }\n          }\n          if (min != i) {\n            //After each pass, if the current min num != initial min num, exchange the position.\n            //Swap the numbers \n            var tmp = arrayss[i];\n            arrayss[i] = arrayss[min];\n            arrayss[min] = tmp;\n          }\n        }\n        const t1ss=performance.now();\n        this.setState({chartDataSorted:{\n          datasets:[\n              { label:'Selection Sorted Values',\n                  data:arrayss\n              }\n          ]\n      \n      }})\n      document.getElementById('time-taken-ss').innerHTML=`${t1ss-t0ss}`;    \n      }\n      \n     bubbleSort(){\n        const chartData=this.state.chartData;\n        const arraybs=chartData.datasets[0].data;\n        var length = arraybs.length;\n        let swapped = false;\n        const t0bs=performance.now();\n  for (var i = 0; i < length; i++) {\n    for (var j = 0; j < (length - i - 1); j++) { \n      //Compare the adjacent positions\n        if (arraybs[j] > arraybs[j + 1]) {\n        \n          //Swap the numbers\n          var tmp = arraybs[j]; //Temporary variable to hold the current number\n          arraybs[j] = arraybs[j + 1]; //Replace current number with adjacent number\n          arraybs[j + 1] = tmp; //Replace adjacent number with current number\n          swapped = true;\n       }\n  }\n  if(!swapped){\n    break;\n  }\n}\n  const t1bs=performance.now();\n  this.setState({chartDataSorted:{\n    datasets:[\n        { label:'Bubble Sorted Values',\n            data:arraybs\n        }\n    ]\n\n}})\ndocument.getElementById('time-taken-bs').innerHTML=`${t1bs-t0bs}`;    \n\n}\n      \n\n    render() {\n        return (\n            <div>\n                 <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"col-12 col-md-8\">\n      <div className=\"array-container\">\n      <Bar data={this.state.chartData}\n              />\n\n\n        </div>\n        </div>\n        <div className=\"col-12 col-md-4 py-4\">\n        <div className=\"buttons-container\">\n\n<div className=\"row\">\n  <div className=\"col-12\"><button className=\"btn btn-light\" onClick={() => this.resetArray()}>Click Here to get Started</button></div>\n       <div className=\"col-12\">\n         <div>Generate New Array Of Size</div>\n         <button className=\"btn btn-light\" onClick={() => this.resetSizeOfArray100()}>100</button>\n         <button className=\"btn btn-light\" onClick={() => this.resetSizeOfArray250()}>250</button>\n         <button className=\"btn btn-light\" onClick={() => this.resetSizeOfArray500()}>500</button>\n         <button className=\"btn btn-light\" onClick={() => this.resetSizeOfArray1000()}>1000</button>\n         <button className=\"btn btn-light\" onClick={() => this.resetSizeOfArray5000()}>5000</button>\n         <div className=\"text-info\">Array Size &gt; 1000 may cause browser to slow down</div>\n         </div>\n         \n      </div>\n      \n      </div>\n      </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-12 col-md-4 order-2 py-4\">\n        <div className=\"row\">\n       <div className=\"col-6\"><button className=\"btn btn-light\" onClick={() => this.clearSortGraph()}>Clear Sort Graph</button></div>\n       <div className=\"col-6\">Time Elapsed(ms)</div>\n       <div className=\"col-6\"><button className=\"btn btn-light\" onClick={() => this.bubbleSort()}>Bubble Sort</button></div>\n       <div className=\"col-6\" id=\"time-taken-bs\"></div>\n        <div className=\"col-6\"><button className=\"btn btn-light\" onClick={() => this.mergeSort()}>Merge Sort</button></div>\n        <div className=\"col-6\" id=\"time-taken-ms\"></div>\n        <div className=\"col-6\"><button className=\"btn btn-light\" onClick={() => this.quickSort()}>Quick Sort</button></div>\n        <div className=\"col-6\" id=\"time-taken-qs\"></div>\n        <div className=\"col-6\"><button className=\"btn btn-light\" onClick={() => this.insertionSort()}>Insertion Sort</button></div>\n        <div className=\"col-6\" id=\"time-taken-is\"></div>\n        \n      <div className=\"col-6\"><button className=\"btn btn-light\" onClick={() => this.selectionSort()}>Selection Sort</button></div>\n      <div className=\"col-6\" id=\"time-taken-ss\"></div>\n      </div>\n<div className=\"text-info\">Least Count of time measurement depends on your browser settings, <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance/now\">click here</a> for more info</div>\n        </div>\n        <div className=\"col-12 col-md-8 order-1\">\n        <Bar data={this.state.chartDataSorted}\n              />\n              \n        </div>\n      \n      </div>\n      <div className=\"row\">\n        <div className=\"col-12 col-md-8\"><Bar data={this.state.chartDataTime}/></div>\n        <div className=\"col-12 col-md-4 py-4\"><Button className=\"btn btn-light\" onClick={()=>this.computeTimeGraph()}>Compute Time Graph</Button></div>\n      </div>\n      \n      </div>\n     \n      \n      </div>\n        )\n    }\n}\nfunction randomIntFromInterval(min, max){ \n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }","import React, { useState } from 'react';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText\n} from 'reactstrap';\nimport {NavLink} from 'react-router-dom';\nconst Header = (props) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n      <Navbar light className=\"bg-light\" expand=\"md\">\n        <NavbarBrand to=\"/\">algoVisualizer</NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n          <NavItem>\n              <NavLink to=\"/home\" className=\"nav-link\">Time Comparsion Algos</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/sorting-visualizer\" className=\"nav-link\">Sorting Algo Visualizer</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink to=\"/pathfinding\" className=\"nav-link\">Dijkstra Algo Visualizer</NavLink>\n            </NavItem>\n           \n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                Documentation\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem>\n                  Sorting Algo Visualizer\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Djikstra Algo Visualizer\n                </DropdownItem>\n                <DropdownItem divider />\n                <DropdownItem>\n                  Time Comparision Algos\n                </DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default Header;\n","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const helperArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, helperArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(mainArray, startIdx, endIdx, helperArray, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(helperArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(helperArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, helperArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    helperArray,\n    animations\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      animations.push([i, j]);\n      animations.push([i, j]);\n      if (helperArray[i] <= helperArray[j]) {\n        animations.push([k, helperArray[i]]);\n        mainArray[k++] = helperArray[i++];\n      } else {\n        animations.push([k, helperArray[j]]);\n        mainArray[k++] = helperArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n      animations.push([i, i]);\n      animations.push([k, helperArray[i]]);\n      mainArray[k++] = helperArray[i++];\n    }\n    while (j <= endIdx) {\n      animations.push([j, j]);\n      animations.push([j, j]);\n      animations.push([k, helperArray[j]]);\n      mainArray[k++] = helperArray[j++];\n    }\n  }","export function getBubbleSortAnimations(array) {\n    let animations = [];\n    let helperArray = array.slice();\n    bubbleSort(helperArray, animations);\n    return animations;\n  }\n  \n  function bubbleSort(helperArray, animations) {\n    const length = helperArray.length;\n    let x = length - 1;\n    while (x > 0) {\n      let swapped = false;\n      for (let i = 0; i < x; ++i) {\n        animations.push([\"comparison1\", i, i + 1]);\n        animations.push([\"comparison2\", i, i + 1]);\n        if (helperArray[i] > helperArray[i + 1]) {\n          swapped = true;\n          animations.push([\"swap\", i, helperArray[i + 1]]);\n          animations.push([\"swap\", i + 1, helperArray[i]]);\n          swap(helperArray, i, i + 1);\n        }\n      }\n      if (!swapped) break;\n      x--;\n    }\n  }\n  \n  function swap(helperArray, firstIndex, secondIndex) {\n    let temp = helperArray[firstIndex];\n    helperArray[firstIndex] = helperArray[secondIndex];\n    helperArray[secondIndex] = temp;\n  }","import {randomIntFromInterval} from \"../Components/SortingVisualiser/SortingVisualiserComponent\";\n\nexport function getQuickSortAnimations(array) {\n  let animations = [];\n  let helperArray = array.slice();\n  doQuickSort(helperArray, 0, helperArray.length - 1, animations);\n  array = helperArray;\n  return animations;\n}\n\nfunction doQuickSort(helperArray, startIdx, endIdx, animations) {\n  let pivotIdx;\n  if (startIdx === endIdx) return;\n  if (startIdx < endIdx) {\n    pivotIdx = partitionArray(helperArray, startIdx, endIdx, animations);\n    doQuickSort(helperArray, startIdx, pivotIdx - 1, animations);\n    doQuickSort(helperArray, pivotIdx + 1, endIdx, animations);\n  }\n}\n\nfunction partitionArray(helperArray, startIdx, endIdx, animations) {\n  let pivotIdx = randomIntFromInterval(startIdx, endIdx); // get a random index in array for pivot\n\n  animations.push([\"comparison1\", pivotIdx, endIdx]);\n  animations.push([\"swap\", pivotIdx, helperArray[endIdx]]);\n  animations.push([\"swap\", endIdx, helperArray[pivotIdx]]);\n  animations.push([\"comparison2\", pivotIdx, endIdx]);\n  swapEleInArray(helperArray, pivotIdx, endIdx);\n\n  let lti = startIdx;\n\n  for (let i = startIdx; i < endIdx; ++i) {\n    animations.push([\"comparison1\", i, endIdx]);\n    animations.push([\"comparison2\", i, endIdx]);\n    if (helperArray[i] <= helperArray[endIdx]) {\n      animations.push([\"comparison1\", i, lti]);\n      animations.push([\"swap\", i, helperArray[lti]]);\n      animations.push([\"swap\", lti, helperArray[i]]);\n      animations.push([\"comparison2\", i, lti]);\n      swapEleInArray(helperArray, i, lti);\n      lti++;\n    }\n  }\n  animations.push([\"comparison1\", lti, endIdx]);\n  animations.push([\"swap\", endIdx, helperArray[lti]]);\n  animations.push([\"swap\", lti, helperArray[endIdx]]);\n  animations.push([\"comparison2\", lti, endIdx]);\n\n  swapEleInArray(helperArray, lti, endIdx);\n  return lti;\n}\n\nfunction swapEleInArray(helperArray, firstIdx, secondIdx) {\n  let temp = helperArray[firstIdx];\n  helperArray[firstIdx] = helperArray[secondIdx];\n  helperArray[secondIdx] = temp;\n}","import React from 'react';\nimport { getMergeSortAnimations } from \"../../Algorithms/MergeSort\";\nimport { getBubbleSortAnimations } from \"../../Algorithms/BubbleSort\";\nimport { getInsertionSortAnimations } from \"../../Algorithms/InsertionSort\";\nimport{getSelectionSortAnimations} from '../../Algorithms/SelectionSort';\nimport { getQuickSortAnimations } from \"../../Algorithms/QuickSort\";\nimport './SortingVisualiser.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 120;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 15;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'rgba(0, 0, 0, 0.1)';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'grey';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 300));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    // Handles displaying merge sort animations\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const ifColorChange = i % 3 !== 2;\n      if (ifColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    // Handles displaying quick sort animations\n    const animations = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? SECONDARY_COLOR\n            : PRIMARY_COLOR;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  insertionSort() {\n    // Handles displaying insertion sort animations\n    const animations = getInsertionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? SECONDARY_COLOR\n            : PRIMARY_COLOR;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  selectionSort() {\n    // Handles displaying insertion sort animations\n    const animations = getSelectionSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? SECONDARY_COLOR\n            : PRIMARY_COLOR;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  bubbleSort() {\n    // Handles displaying bubble sort animations\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparison1\" ||\n        animations[i][0] === \"comparison2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange) {\n        const color =\n          animations[i][0] === \"comparison1\"\n            ? SECONDARY_COLOR\n            : PRIMARY_COLOR;\n        const [, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [, barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  render() {\n    const {array} = this.state;\n\n    return (\n        <div className=\"container\">\n        <div className=\"row\">\n        <div className=\"col-12 col-md-8\">\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        </div>\n        </div>\n        <div className=\"col-12 col-md-4\">\n        <div className=\"btn-container\">\n\n       <div><button className=\"btn btn-light\" onClick={() => this.resetArray()}>Generate New Array</button></div>\n        <div><button className=\"btn btn-light\" onClick={() => this.mergeSort()}>Merge Sort</button></div>\n        <div><button className=\"btn btn-light\" onClick={() => this.quickSort()}>Quick Sort</button></div>\n        <div><button className=\"btn btn-light\" onClick={() => this.insertionSort()}>Insertion Sort</button></div>\n        <div><button className=\"btn btn-light\" onClick={() => this.bubbleSort()}>Bubble Sort</button></div>\n      </div>\n      <div><button className=\"btn btn-light\" onClick={() => this.selectionSort()}>Selection Sort</button></div>\n      </div>\n      </div>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nexport function randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n// function arraysAreEqual(arrayOne, arrayTwo) {\n//   if (arrayOne.length !== arrayTwo.length) return false;\n//   for (let i = 0; i < arrayOne.length; i++) {\n//     if (arrayOne[i] !== arrayTwo[i]) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\n","export function getInsertionSortAnimations(array) {\n    let animations = [];\n    let helperArray = array.slice();\n    insertionSort(helperArray, animations);\n    return animations;\n  }\n  \n  function insertionSort(helperArray, animations) {\n    const length = helperArray.length;\n    for (let i = 1; i < length; i++) {\n      let position = helperArray[i];\n      let j = i - 1;\n      animations.push([\"comparison1\", j, i]);\n      animations.push([\"comparison2\", j, i]);\n      while (j >= 0 && helperArray[j] > position) {\n        animations.push([\"overwrite\", j + 1, helperArray[j]]);\n        helperArray[j + 1] = helperArray[j];\n        j = j - 1;\n        if (j >= 0) {\n          animations.push([\"comparison1\", j, i]);\n          animations.push([\"comparison2\", j, i]);\n        }\n      }\n      animations.push([\"overwrite\", j + 1, position]);\n      helperArray[j + 1] = position;\n    }\n  }","export function getSelectionSortAnimations(array) {\n    let animations = [];\n    let helperArray = array.slice();\n    selectionSort(helperArray, animations);\n    return animations;\n  }\n\n  function selectionSort(helperArray,animations) {\n\tvar length = helperArray.length;\n\tfor (var i = 0; i < length - 1; i++) {\n\t\t//Number of passes\n\t\tvar min = i;\n\t\t//min holds the current minimum number position for each pass; i holds the Initial min number\n\t\tfor (var j = i + 1; j < length; j++) {\n\t\t\tanimations.push([\"comparision1\",j,min]);\n\t\t\tanimations.push([\"comparision2\",j,min]); //Note that j = i + 1 as we only need to go through unsorted array\n\t\t\tif (helperArray[j] < helperArray[min]) { //Compare the numbers\n\t\t\t\tanimations.push([\"overwrite\", min, j]);\n\t\t\t\tmin = j; \n\t\t\t\n                \n                    //Change the current min number position if a smaller num is found\n\t\t\t}\n\t\t}\n\t\tif (min != i) {\n\t\t\t//After each pass, if the current min num != initial min num, exchange the position.\n\t\t\t//Swap the numbers \n\t\t\tanimations.push([\"swap\", i, helperArray[min]]);\n\t\t\tanimations.push([\"swap\", min, helperArray[i]]);\n\t\t\tvar tmp = helperArray[i];\n\t\t\thelperArray[i] = helperArray[min];\n\t\t\thelperArray[min] = tmp;\n\t\t}\n\t}\n}\n  \n//   function sellectionSort(helperArray, animations) {\n//     const length = helperArray.length;\n//     for (let i = 1; i < length; i++) {\n//       let position = helperArray[i];\n//       let j = i - 1;\n//       animations.push([\"comparison1\", j, i]);\n//       animations.push([\"comparison2\", j, i]);\n//       while (j >= 0 && helperArray[j] > position) {\n//         animations.push([\"overwrite\", j + 1, helperArray[j]]);\n//         helperArray[j + 1] = helperArray[j];\n//         j = j - 1;\n//         if (j >= 0) {\n//           animations.push([\"comparison1\", j, i]);\n//           animations.push([\"comparison2\", j, i]);\n//         }\n//       }\n//       animations.push([\"overwrite\", j + 1, position]);\n//       helperArray[j + 1] = position;\n//     }\n//   }","import React from 'react';\nimport TimeComparision from './Components/TimeComparisionComponent';\nimport Header from './Components/HeaderComponent';\nimport SortingVisualizer from './Components/SortingVisualiser/SortingVisualiserComponent';\nimport {Route,Switch,HashRouter,Redirect} from 'react-router-dom'\nimport './App.css';\n\nfunction App() {\n  return (\n    <HashRouter>\n    <div className=\"App\">\n    <Header/>\n    <Switch>\n    <Route path=\"/home\" component={()=> <TimeComparision/>}/>\n    <Route exact path=\"/sorting-visualizer\" component={()=> <SortingVisualizer/>}/>\n    <Redirect to=\"/home\"/>\n    </Switch>\n    </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}